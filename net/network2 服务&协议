# 网络软件
最初计算机网络主要考虑硬件。但由于现在的网络软件已高度结构化（形成了复杂的系统），因此如今还需要考虑软件构造技术

## 协议层次技术
绝大多数网络都设计成层次栈/分级栈
每一层都是一种虚拟机，向上一层提供服务并屏蔽服务细节
网络实现于对等层的互相通信，对等层遵守相应的协议，都认为自己是直接在和对方接触，但实际上是通过底层进行沟通
上下层之间则是通过接口进行通信，定义了下层要对上层提供哪些原语操作和服务
下层可进行更换，只需遵守原有协议即可

## 层次设计问题
关键问题:
### 可靠性问题
检错（纠错）
路由算法

### 网络演进可扩展问题
标示发送方和接收方（寻址/命名）
拆分 重组 发送信息顺序
网络变大后是否还是可扩展的

### 资源分配问题
分配资源使得一台主机不会过多影响到另一台主机
统计复用：给主机分配动态带宽
流量控制：快速发送方不会用数据把慢速方淹没
网络超载：拥塞
实时直播　保证服务质量

### 安全性问题
通信保密防窃听
认证机制
保证数据完整性


## 面向连接和无连接服务
下层向上层提供的两种服务
### 面向连接：按照电话系统建模
数据会保证顺序
有些情况 发送方 接收方 子网会协商参数
### 无连接服务
#### 存储-转发交换
中间节点收到全部内容后再转发（保证完整）
#### 直通式交换
报文还没有被全部接受完毕就向下一个节点传输（可能后发先至）

**服务可以用服务质量来表述其特征**
可靠服务：从不丢失数据
接收方向发送方确认收到的每个报文，发送方就可以据此保证报文达到接收方

### 可靠的面向连接的服务：文件传输
可靠的面向连接的服务的两个变异形式
- 报文序列
		书的每一页的发送
- 字节流
		电影

### 宁可不要可靠性的面向连接的应用：IP语音
宁可有噪音也不能停下来等

### 不可靠的不面向连接的应用（数据报服务）：垃圾邮件

### 可靠的不面向连接的服务（有确认的数据报服务）：手机短信
类似于挂号信

### 请求-应答服务
数据库查询
客户-服务器模型

## 为什么会存在不可靠连接
- 给定层次可能并不是总可以使用可靠通信
- 以太网并没有可靠通信
- 许多可靠服务是建立在不可靠数据报服务之上的
- 可靠服务的固有延迟不可以接受

# 服务原语
用户进程通过服务原语访问该服务
系统调用-》内核模式-》发送数据包
可用的原语取决于底层提供的服务，面向连接的原语与无连接的原语是不同的
简化伯克利套接字原语
```
LISTEN
CONNECT
ACCEPT
RECEIVE
SEND
DISCONNECT
```
在客户机-服务器模型中，可利用这些原语进行请求应答交互式应用
```
服务器执行LISTEN（阻塞的系统调用，服务器进程被阻塞）
客户执行CONNECT原语（包含一个ip）客户进程挂起，直到有应答唤醒
数据包到达服务器时，操作系统检查是否存在一个监听进程，解除该监听进程的阻塞，用ACCEPT调用创建连接服务器给客户进程发送响应。收到响应后客户进程解除恢复运行状态
服务器执行RECEIVE，并阻塞
客户机SEND请求，接着执行RECEIVE等待服务器应答
服务器收到请求后解除阻塞，将执行结果SEND回客户机，继续RECEIVE
客户任务完成后可以执行DISCONNECT终止当前连接发送包后挂起
服务器收到DICONNECT包后，发出自己的DISCONNECT并释放连接，服务器包到达客户机后，客户进程被解除阻塞恢复运行
```

### 这个过程中的问题
- 时间顺序出错
- 数据包丢失
以后解决...

### 在一个不可靠的网络上，简单的请求应答协议是无法胜任的

## 服务和协议的关系
服务是某一层向它的上一层提供的一组原语（操作）服务与两层间的接口有关
协议是同一层上对等实体之间交换的数据包或报文的格式，可以随意更改
**服务和协议是完全分离的**
许多老的协议没有将服务和协议区分开，用SENDPACKET服务原语的任何一点都会暴露给用户，这是一个严重失误














